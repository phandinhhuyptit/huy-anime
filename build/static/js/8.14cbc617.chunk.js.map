{"version":3,"sources":["utils/Storage.ts","components/Button.tsx","pages/InfoScreen/useFetchInfo.ts","components/Disclosure.tsx","components/Episode.tsx","components/EpisodeChunk.tsx","../../../../src/components/disclosure/disclosure.tsx","pages/InfoScreen/index.tsx"],"names":["Storage","localStorage","clear","storageKey","filter","rawList","getItem","list","JSON","parse","setItem","stringify","item","compareTwoObject","value","push","parsedList","isObjectEmpty","find","this","remove","findOne","updatedItem","create","obj","obj1","obj2","isComparedCount","entries","Object","key","length","ButtonRaw","props","className","iconSize","iconClassName","StartIcon","startIcon","EndIcon","endIcon","buttonProps","classNames","size","children","Button","onClick","to","useFetchInfo","slug","useQuery","getInfo","Disclosure","defaultOpen","as","open","buttonClassName","button","Panel","panelClassName","static","Episode","name","Image","src","thumbnail_medium","full_name","numberWithCommas","views","active","EpisodeChunkButton","title","EpisodeChunk","episodes","map","episode","index","activeName","episodeOnClick","DisclosureStates","ActionTypes","reducers","state","disclosureState","match","Closed","linkedPanel","action","buttonId","panelId","DisclosureContext","createContext","useDisclosureContext","component","context","useContext","err","Error","DisclosureAPIContext","useDisclosureAPIContext","DisclosurePanelContext","stateReducer","DEFAULT_DISCLOSURE_TAG","passthroughProps","useId","reducerBag","useReducer","dispatch","useEffect","type","close","useCallback","CloseDisclosure","restoreElement","focusableElement","document","api","useMemo","slot","State","render","defaultTag","forwardRefWithAs","buttonRef","useSyncRefs","panelContext","isWithinPanel","handleKeyDown","event","Keys","ToggleDisclosure","handleKeyUp","handleClick","isDisabledReactIssue7711","Open","propsWeControl","onKeyDown","ref","id","onKeyUp","PanelRenderFeatures","Features","panelRef","LinkPanel","usesOpenClosedState","useOpenClosed","visible","UnlinkPanel","features","InfoScreen","useParams","navigate","useNavigate","storedInfo","handleEpisodeClick","_e","info","data","isLoading","thumbnail","alt","subTeams","join","BsPlayFill","episodeIndex","genres","description","chunk","i","firstEpisode","lastEpisode"],"mappings":"wIAAMA,E,0FACJ,WACEC,aAAaC,U,oBAGf,SAAcC,EAAoBC,GAChC,IAAMC,EAAUJ,aAAaK,QAAQH,GAErC,GAAKE,EAAL,CAEA,IAAME,EAAiBC,KAAKC,MAAMJ,GAGlCJ,aAAaS,QACXP,EACAK,KAAKG,UAAUJ,EAAKH,QAAO,SAACQ,GAAD,OAAWC,EAAiBD,EAAMR,W,oBAIjE,SAAcD,EAAoBW,GAChC,IAAMT,EAAUJ,aAAaK,QAAQH,GAErC,IAAKE,EACH,OAAOJ,aAAaS,QAClBP,EACAK,KAAKG,UAAU,CAACG,KAIpB,IAAMP,EAAOC,KAAKC,MAAMJ,GAExBE,EAAKQ,KAAKD,GAEVb,aAAaS,QAAQP,EAAYK,KAAKG,UAAUJ,M,qBAGlD,SAA6BJ,GAAiD,IAA7BC,EAA4B,uDAAnB,GAClDC,EAAUJ,aAAaK,QAAQH,GAErC,GAAKE,EAAL,CAEA,IAAMW,EAAkBR,KAAKC,MAAMJ,GAEnC,OAAIY,EAAcb,GACTY,EAAW,GAGbA,EAAWE,MAAK,SAACN,GAAD,OAAUC,EAAiBD,EAAMR,S,kBAG1D,SAAeD,GAA4C,IAAxBC,EAAuB,uDAAd,GACpCC,EAAUJ,aAAaK,QAAQH,GAErC,IAAKE,EAAS,MAAO,GAErB,IAAMW,EAAkBR,KAAKC,MAAMJ,GAEnC,OAAIY,EAAcb,GACTY,EAGFA,EAAWZ,QAAO,SAACQ,GAAD,OAAUC,EAAiBD,EAAMR,Q,oBAG5D,SAAcD,EAAoBC,EAAgBU,GAChDK,KAAKC,OAAOjB,EAAYC,GAExB,IAAMQ,EAAOO,KAAKE,QAAQlB,EAAYC,GAEhCkB,EAAW,2BAAQV,GAASE,GAElC,OAAOK,KAAKI,OAAOpB,EAAYmB,K,iBAGjC,SAAWnB,EAAoBC,GAC7B,IAAMQ,EAAOO,KAAKE,QAAQlB,EAAYC,GAEtC,QAAKQ,IAEGK,EAAcL,O,KAIpBK,EAAgB,SAACO,GAAD,MAAyC,OAAxBhB,KAAKG,UAAUa,IAGhDX,EAAmB,SAAuBY,EAASC,GAKvD,IAJA,IAAIC,EAAkB,EAEhBC,EAAUC,OAAOD,QAAQF,GAE/B,MAA2BE,EAA3B,eAAoC,CAAC,IAAD,sBAAxBE,EAAwB,KAAnBhB,EAAmB,KAC9BW,EAAKK,KAAchB,GACrBa,IAIJ,OAAOA,IAAoBC,EAAQG,QAGtB/B,O,2FClFTgC,EAAY,SAACC,GAA2B,IAE1CC,EAOED,EAPFC,UAFyC,EASvCD,EANFE,gBAHyC,MAG9B,GAH8B,EAIzCC,EAKEH,EALFG,cACWC,EAITJ,EAJFK,UACSC,EAGPN,EAHFO,QAEGC,EARsC,YASvCR,EATuC,gEAU3C,OACE,iDACEC,UAAWQ,IACT,yGACAR,IAEEO,GALN,cAOGJ,GACC,cAACA,EAAD,CACEM,KAAMR,EACND,UAAWQ,IAAW,OAAQN,KAGjCH,EAAMW,SAENL,GACC,cAACA,EAAD,CACEI,KAAMR,EACND,UAAWQ,IAAW,OAAQN,UAmBzBS,IAZA,SAACZ,GAAwB,IAC9Ba,EAAgCb,EAAhCa,QAASC,EAAuBd,EAAvBc,GAAON,EADa,YACGR,EADH,kBAGrC,OAAOc,EACL,cAAC,IAAD,CAAMA,GAAIA,EAAV,SACE,cAACf,EAAD,eAAeS,MAGjB,cAACT,EAAD,2BAAeS,GAAf,IAA4BK,QAASA,O,iCC9DzC,qBAOeE,IAJM,SAACC,GACpB,OAAOC,YAAS,CAAC,OAAQD,IAAO,kBAAME,YAAQF,Q,6FCmCjCG,EA3BI,SAACnB,GAClB,OACE,cAAC,IAAD,CACEoB,YAAapB,EAAMoB,YACnBC,GAAG,MACHpB,UAAWQ,IAAWT,EAAMC,WAH9B,SAKG,gBAAGqB,EAAH,EAAGA,KAAH,OACC,qCACE,cAAC,IAAmBV,OAApB,CACEX,UAAWQ,IAAW,QAAST,EAAMuB,iBADvC,SAGGvB,EAAMwB,SAGT,cAAC,IAAmBC,MAApB,CACExB,UAAWQ,IAAWT,EAAM0B,gBAAiBJ,GAAQ,UACrDK,QAAM,EAFR,SAIG3B,EAAMW,kB,gBCWJiB,EAhCC,SAAC5B,GACf,OACE,sBACEa,QAASb,EAAMa,QACfZ,UAAU,gIAFZ,UAIE,mBAAGA,UAAU,8CAAb,SACGD,EAAM6B,OAGT,cAACC,EAAA,EAAD,CACE7B,UAAU,gDACV8B,IAAK/B,EAAMgC,mBAGb,sBAAK/B,UAAU,mBAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,mBAAGA,UAAU,8CAAb,SACGD,EAAMiC,YAET,oBAAGhC,UAAU,sCAAb,iCACaiC,YAAiBlC,EAAMmC,aAGrCnC,EAAMoC,QACL,qBAAKnC,UAAU,wCAAf,kCCxBJoC,EAAwD,SAACrC,GAC7D,OACE,sBAAKC,UAAU,qDAAf,UACE,mBAAGA,UAAU,qBAAb,SAAmCD,EAAMsC,QAEzC,cAAC,IAAD,CAAerC,UAAU,2BAmChBsC,IApBmC,SAACvC,GACjD,OACE,cAAC,EAAD,CACEC,UAAWQ,IAAWT,EAAMC,WAC5BsB,gBAAiBd,IAAW,oBAAqBT,EAAMuB,iBACvDC,OAAQ,cAAC,EAAD,CAAoBc,MAAOtC,EAAMsC,QACzClB,YAAapB,EAAMsB,KAJrB,SAMGtB,EAAMwC,SAASC,KAAI,SAACC,EAASC,GAAV,OAClB,wBAAC,EAAD,2BACMD,GADN,IAEE7C,IAAK6C,EAAQ1B,KACboB,OAAQpC,EAAM4C,aAAeF,EAAQb,KACrChB,QAAS,+BAAMb,QAAN,IAAMA,GAAN,UAAMA,EAAO6C,sBAAb,aAAM,OAAA7C,EAAwB0C,EAASA,EAAQb,KAAO,c,yECfzE,EAcA,E,+EAdA,SAAKiB,GACHA,mBACAA,uBAFF,CAAKA,MAAL,KAcA,SAAKC,GACHA,2CACAA,yCAEAA,iCACAA,+BAEAA,6BACAA,iCARF,CAAKA,MAAL,KAmBA,IAAIC,IAAQ,MAMTD,EANS,kBAMsB,SAAAE,GAAK,+BAEnCC,gBAAiBC,YAAMF,EAAD,wBACnBH,EADmB,MACKA,EADL,SAEnBA,EAFmB,QAEOA,EAFP,YARd,EAaTC,EAbS,iBAaqB,SAAAE,GAC7B,OAAIA,oBAA0BH,EAA9B,OAA8DG,EAC9D,kBAAmBC,gBAAiBJ,EAAiBM,UAf7C,EAiBTL,EAjBS,uBAkBR,WAAIE,cAAmCA,EACvC,kBAAmBI,aAAa,KAnBxB,EAqBTN,EArBS,yBAsBR,WAAIE,cAAoCA,EACxC,kBAAmBI,aAAa,KAvBxB,EAyBTN,EAzBS,2BA0BR,OAAIE,aAAmBK,EAAvB,SAA+CL,EAC/C,kBAAmBM,SAAUD,EAAOC,YA3B5B,EA6BTR,EA7BS,0BA8BR,OAAIE,YAAkBK,EAAtB,QAA6CL,EAC7C,kBAAmBO,QAASF,EAAOE,WA/BvC,GAmCIC,EAAoBC,wBAAxB,MAGA,SAASC,EAAqBC,GAC5B,IAAIC,EAAUC,qBAAd,GACA,UAAID,EAAkB,CACpB,IAAIE,EAAM,IAAIC,MAAM,IAAV,8BAAmD7C,EAAnD,KAAV,kBAEA,MADI6C,MAAJ,mBAA6BA,6BAC7B,EAEF,SATFP,kCAYA,IAAIQ,EAAuBP,wBAA3B,MAKA,SAASQ,EAAwBN,GAC/B,IAAIC,EAAUC,qBAAd,GACA,UAAID,EAAkB,CACpB,IAAIE,EAAM,IAAIC,MAAM,IAAV,8BAAmD7C,EAAnD,KAAV,kBAEA,MADI6C,MAAJ,mBAA6BA,6BAC7B,EAEF,SATFC,qCAYA,IAAIE,EAAyBT,wBAA7B,MAOA,SAASU,EAAanB,EAAtB,GACE,OAAOE,YAAMG,EAAD,SAAZ,GAPFa,uCAYA,IAAIE,EAAJ,W,SAMgBlD,EACdnB,G,QAImDA,EAA7CoB,uBAAcA,GAAA,EAAUkD,cAAqBtE,mBAC/CuD,EAAW,gCAAgCgB,cAC3Cf,EAAU,+BAA+Be,cAEzCC,EAAaC,qBAAWL,EAAc,CACxClB,gBAAiB9B,EAAc0B,EAAH,KAA2BA,EADf,OAExCO,aAFwC,EAGxCE,SAHwC,EAIxCC,YAEKN,EAA+BsB,KAA/BtB,gBAAmBwB,EAAYF,KAEtCG,qBAAU,kBAAMD,EAAS,CAAEE,KAAM7B,EAAR,YAAiCQ,eAAa,CAACA,EAAxEoB,IACAA,qBAAU,kBAAMD,EAAS,CAAEE,KAAM7B,EAAR,WAAgCS,cAAY,CAACA,EAAtEmB,IAEA,IAAIE,EAAQC,uBACV,YACEJ,EAAS,CAAEE,KAAM7B,EAAYgC,kBAE7B,IAAIC,EACF,EACIC,aAAJ,YAAoDA,EAChDA,qBAAJ,YAA4DA,EAAP,QAE9CC,wBAAP,GAJ8BA,wBAAP,GAOzBF,qBAEF,CAACN,EAdH,IAiBIS,EAAMC,mBAAkD,iBAAO,CAAEP,WAAU,CAA/E,IAEIQ,EAAOD,mBACT,iBAAO,CAAE9D,KAAM4B,IAAoBJ,EAA5B,KAAmD+B,WAC1D,CAAC3B,EAFH,IAKA,OACE,kBAACO,EAAD,UAA4B5E,MAAO2F,GACjC,kBAACP,EAAD,UAA+BpF,MAAOsG,GACpC,uBACEtG,MAAOsE,YAAMD,GAAD,OACTJ,EADS,MACewC,IADf,OAETxC,EAFS,QAEiBwC,IAFjB,YAKXC,YAAO,CACNvF,MADM,EAENqF,KAFM,EAGNG,WAHM,EAIN3D,KAAM,kBAUlB,IAYIjB,EAAS6E,aAAiB,SAAS7E,EAAT,K,MAIJ+C,EAAqB,CAACxC,EAAD,KAAkBP,EAAlB,WAAD,MAAvCqC,OAAOyB,OACRgB,EAAYC,YAAhB,GAEIC,EArGG9B,qBAAP,GAsGI+B,EAAgBD,UAAgCA,IAAiB3C,EAArE,QAEI6C,EAAgBhB,uBAClB,Y,MACE,KAAmB,CACjB,GAAI7B,oBAA0BH,EAA9B,OAAuD,OAEvD,OAAQiD,EAAR,KACE,KAAKC,IAAL,MACA,KAAKA,IAAL,MACED,mBACAA,oBACArB,EAAS,CAAEE,KAAM7B,EAAYkD,mBAC7B,SAAAf,SAAA,eAAwBjC,EAAxB,4BAIJ,OAAQ8C,EAAR,KACE,KAAKC,IAAL,MACA,KAAKA,IAAL,MACED,mBACAA,oBACArB,EAAS,CAAEE,KAAM7B,EAAYkD,sBAKrC,CAACvB,EAAUmB,EAAe5C,EAzB5B,kBA4BIiD,EAAcpB,uBAAY,YAC5B,OAAQiB,EAAR,KACE,KAAKC,IAAL,MAIED,sBANN,IAWII,EAAcrB,uBAChB,YAIqB,MAHfsB,YAAyBL,EAA7B,iBACI/F,EAAJ,WAEA,GACE0E,EAAS,CAAEE,KAAM7B,EAAYkD,mBAC7B,SAAAf,SAAA,eAAwBjC,EAAxB,uBAEAyB,EAAS,CAAEE,KAAM7B,EAAYkD,uBAGjC,CAACvB,EAAU1E,EAAX,SAA2BiD,EAA3B,SAZF,IAeIoC,EAAOD,mBACT,iBAAO,CAAE9D,KAAM2B,oBAA0BH,EAAiBuD,QAC1D,CAFF,IAKI/B,EAAJ,EACIgC,EAAiBT,EACjB,CAAEjB,KAAF,SAAkB2B,UAAlB,EAA4C1F,QAASsF,GACrD,CACEK,IADF,EAEEC,GAAIxD,EAFN,SAGE2B,KAHF,SAIE,gBAAiB5E,kBAEbiD,oBAA0BH,EANhC,KAOE,gBAAiBG,cAAoBA,EAApBA,aAPnB,EAQEsD,UARF,EASEG,QATF,EAUE7F,QAASsF,GAGf,OAAOZ,YAAO,CACZvF,MAAO,OAAF,IAAE,CAAF,KADO,GAEZqF,KAFY,EAGZG,WApGJ,SAqGI3D,KAAM,yBAaN8E,EAAsBC,mBAA0BA,IAApD,OAEInF,EAAQgE,aAAiB,SAAShE,EAAT,K,MAKHkC,EAAqB,CAACxC,EAAD,KAAkBM,EAAlB,WAAD,MAAvCwB,OAAOyB,OACNG,EAAUX,EAAwB,CAAC/C,EAAD,KAAkBM,EAAlB,WAAD,MAAjCoD,MAEFgC,EAAWlB,YAAYa,GAAK,WAC1BvD,EAAJ,aACAyB,EAAS,CAAEE,KAAM7B,EAAY+D,eAG3BC,EAAsBC,cACtBC,EACF,OAAIF,EACKA,IAAwBzB,IAA/B,KAGKrC,oBAA0BH,EAAjC,KAIF6B,qBAAU,kBAAM,kBAAMD,EAAS,CAAEE,KAAM7B,EAAYmE,iBAAgB,CAAnEvC,IAGAA,qBAAU,W,MACJ1B,oBAA0BH,EAA1BG,iBAAsDjD,EAAtDiD,cACFyB,EAAS,CAAEE,KAAM7B,EAAYmE,gBAE9B,CAACjE,EAAD,gBAAwBjD,EAAxB,QAJH2E,IAMA,IAAIU,EAAOD,mBACT,iBAAO,CAAE9D,KAAM2B,oBAA0BH,EAAlC,KAAyD+B,WAChE,CAAC5B,EAFH,IAIIqD,EAAiB,CACnBE,IADmB,EAEnBC,GAAIxD,EAAMO,SAERc,EAAJ,EAEA,OACE,kBAACH,EAAD,UAAiCtF,MAAOoE,EAAMO,SAC3C+B,YAAO,CACNvF,MAAO,OAAF,IAAE,CAAF,KADC,GAENqF,KAFM,EAGNG,WAxDR,MAyDQ2B,SAJM,EAKNF,QALM,EAMNpF,KAAM,yBAQdV,WACAA,W,iCClYA,qHAgKeiG,UAnJI,WAAO,IAChBpG,EAASqG,cAATrG,KACFsG,EAAWC,cAEZvG,GACHsG,EAAS,KAGX,IAAME,EAAazJ,IAAQqB,QAAe,SAAU,CAAE4B,SAEhDyG,EAAqB,SAACC,EAAiB/E,GAC3C2E,EAAS,UAAD,OAAWtG,EAAX,0BAAiC2B,KAXpB,EAcW5B,YAAaC,GAAjC2G,EAdS,EAcfC,KAAYC,EAdG,EAcHA,UAEd1B,EAAc,WAAgB,IAAfxD,EAAc,uDAAN,EAC3B,OAAO,kBAAM2E,EAAS,UAAD,OAAWtG,EAAX,0BAAiC2B,MAGxD,OACE,qBAAK1C,UAAU,QAAf,SACE,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,8BAAf,SACG4H,EACC,cAAC,IAAD,CAAU5H,UAAU,gBAApB,SACE,qBAAKA,UAAU,gCAGjB,cAAC,IAAD,CACE8B,IAAG,OAAE4F,QAAF,IAAEA,OAAF,EAAEA,EAAMG,UACX7H,UAAU,oDAIhB,sBAAKA,UAAU,8JAAf,UACE,sBAAKA,UAAU,gDAAf,UACG4H,EACC,cAAC,IAAD,UACE,qBAAK5H,UAAU,4GAGjB,cAAC,IAAD,CACE8B,IAAG,OAAE4F,QAAF,IAAEA,OAAF,EAAEA,EAAMG,UACXC,IAAG,OAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAM9F,KACX5B,UAAWQ,IACT,mGAKJoH,GACA,sBACE5H,UAAWQ,IACT,iFAFJ,UAKE,oBAAIR,UAAU,yBAAd,gBAAwC0H,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAM9F,OAE9C,gCACE,qBAAI5B,UAAU,uBAAd,iCACa0H,QADb,IACaA,OADb,EACaA,EAAMK,SAASC,KAAK,SAEjC,qBAAIhI,UAAU,uBAAd,iCACaiC,YAAgB,OAACyF,QAAD,IAACA,OAAD,EAACA,EAAMxF,mBAO5C,sBAAKlC,UAAU,mCAAf,UACE,sBAAKA,UAAU,wJAAf,UACE,cAAC,IAAD,CACEA,UAAU,2CACVY,QAASsF,IACT9F,UAAW6H,IACXhI,SAAU,GAJZ,uBAQE2H,GAAaL,GACb,eAAC,IAAD,CACEvH,UAAU,2CACVY,QAASsF,EAAYqB,EAAWW,cAChC9H,UAAW6H,IACXhI,SAAU,GAJZ,wBAMOyH,QANP,IAMOA,OANP,EAMOA,EAAMnF,SAASgF,EAAWW,cAAelG,gBAKpD,sBAAKhC,UAAU,iBAAf,UACE,sBAAKA,UAAU,YAAf,UACG4H,EACC,cAAC,IAAD,UACE,qBAAK5H,UAAU,sBAGjB,oBAAIA,UAAU,sBAAd,gBAAqC0H,QAArC,IAAqCA,OAArC,EAAqCA,EAAM9F,OAG5CgG,EACC,cAAC,IAAD,UACE,qBAAK5H,UAAU,sBAGjB,qBAAIA,UAAU,0BAAd,wCACa0H,QADb,IACaA,OADb,EACaA,EAAMS,OAAO3F,KAAI,qBAAGZ,QAAiBoG,KAAK,YAK1DJ,EACC,cAAC,IAAD,UACE,qBAAK5H,UAAU,sBAGjB,oBAAIA,UAAU,0BAAd,gBAAyC0H,QAAzC,IAAyCA,OAAzC,EAAyCA,EAAMU,wBAKrDR,GACA,qBAAK5H,UAAU,uCAAf,SACGqI,YAAK,OAAcX,QAAd,IAAcA,OAAd,EAAcA,EAAMnF,SAAW,IAAIC,KAAI,SAAC6F,EAAOC,GACnD,IAAMC,EAAeF,EAAM,GACrBG,EAAcH,EAAMA,EAAMxI,OAAS,GAEzC,OACE,cAAC,IAAD,CACEyB,gBAAgB,uBAChBe,MAAK,mBAASkG,EAAa3G,KAAtB,uBAAoC4G,EAAY5G,MACrDW,SAAU8F,EAEVzF,eAAgB4E,GADXc","file":"static/js/8.14cbc617.chunk.js","sourcesContent":["class Storage {\n  static clear() {\n    localStorage.clear();\n  }\n\n  static remove(storageKey: string, filter: object) {\n    const rawList = localStorage.getItem(storageKey);\n\n    if (!rawList) return;\n\n    const list: object[] = JSON.parse(rawList);\n\n    // Filter out the item we wanna remove\n    localStorage.setItem(\n      storageKey,\n      JSON.stringify(list.filter((item) => !compareTwoObject(item, filter)))\n    );\n  }\n\n  static create(storageKey: string, value: object) {\n    const rawList = localStorage.getItem(storageKey);\n\n    if (!rawList) {\n      return localStorage.setItem(\n        storageKey,\n        JSON.stringify([value]) // Save value in array\n      );\n    }\n\n    const list = JSON.parse(rawList);\n\n    list.push(value);\n\n    localStorage.setItem(storageKey, JSON.stringify(list));\n  }\n\n  static findOne<T extends {}>(storageKey: string, filter = {}): T | undefined {\n    const rawList = localStorage.getItem(storageKey);\n\n    if (!rawList) return undefined;\n\n    const parsedList: T[] = JSON.parse(rawList);\n\n    if (isObjectEmpty(filter)) {\n      return parsedList[0];\n    }\n\n    return parsedList.find((item) => compareTwoObject(item, filter));\n  }\n\n  static find<T>(storageKey: string, filter = {}): T[] | [] {\n    const rawList = localStorage.getItem(storageKey);\n\n    if (!rawList) return [];\n\n    const parsedList: T[] = JSON.parse(rawList);\n\n    if (isObjectEmpty(filter)) {\n      return parsedList;\n    }\n\n    return parsedList.filter((item) => compareTwoObject(item, filter));\n  }\n\n  static update(storageKey: string, filter: object, value: object) {\n    this.remove(storageKey, filter);\n\n    const item = this.findOne(storageKey, filter);\n\n    const updatedItem = { ...item, ...value };\n\n    return this.create(storageKey, updatedItem);\n  }\n\n  static has(storageKey: string, filter: object) {\n    const item = this.findOne(storageKey, filter);\n\n    if (!item) return false;\n\n    return !isObjectEmpty(item);\n  }\n}\n\nconst isObjectEmpty = (obj: object) => JSON.stringify(obj) === \"{}\";\n\n// check if object one contains all property and value of object two.\nconst compareTwoObject = <T, U extends keyof T>(obj1: T, obj2: T) => {\n  let isComparedCount = 0;\n\n  const entries = Object.entries(obj2);\n\n  for (const [key, value] of entries) {\n    if (obj1[key as U] === value) {\n      isComparedCount++;\n    }\n  }\n\n  return isComparedCount === entries.length;\n};\n\nexport default Storage;\n","import classNames from \"classnames\";\nimport { To } from \"history\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Icon } from \"../types\";\n\ninterface ButtonRawProps extends React.HTMLAttributes<HTMLButtonElement> {\n  startIcon?: React.ComponentType<Icon>;\n  endIcon?: React.ComponentType<Icon>;\n  iconSize?: number;\n  iconClassName?: string;\n}\n\ninterface ButtonProps extends ButtonRawProps {\n  onClick?: () => void;\n  to?: To;\n}\n\nconst ButtonRaw = (props: ButtonRawProps) => {\n  const {\n    className,\n    iconSize = 16,\n    iconClassName,\n    startIcon: StartIcon,\n    endIcon: EndIcon,\n\n    ...buttonProps\n  } = props;\n  return (\n    <button\n      className={classNames(\n        \"flex items-center px-4 py-2 rounded-md font-medium text-xs md:text-sm lg:text-base hover:bg-opacity-80\",\n        className\n      )}\n      {...buttonProps}\n    >\n      {StartIcon && (\n        <StartIcon\n          size={iconSize}\n          className={classNames(\"mr-2\", iconClassName)}\n        />\n      )}\n      {props.children}\n\n      {EndIcon && (\n        <EndIcon\n          size={iconSize}\n          className={classNames(\"ml-2\", iconClassName)}\n        />\n      )}\n    </button>\n  );\n};\n\nconst Button = (props: ButtonProps) => {\n  const { onClick, to, ...buttonProps } = props;\n\n  return to ? (\n    <Link to={to}>\n      <ButtonRaw {...buttonProps} />\n    </Link>\n  ) : (\n    <ButtonRaw {...buttonProps} onClick={onClick} />\n  );\n};\n\nexport default Button;\n","import { useQuery } from \"react-query\";\nimport { getInfo } from \"../../services/anime\";\n\nconst useFetchInfo = (slug: string) => {\n  return useQuery([\"info\", slug], () => getInfo(slug));\n};\n\nexport default useFetchInfo;\n","import { Disclosure as HeadlessDisclosure } from \"@headlessui/react\";\nimport classNames from \"classnames\";\nimport React, { PropsWithChildren } from \"react\";\n\ninterface DisclosureProps {\n  button: JSX.Element;\n  className?: string;\n  panelClassName?: string;\n  buttonClassName?: string;\n  defaultOpen?: boolean;\n}\n\nconst Disclosure = (props: PropsWithChildren<DisclosureProps>) => {\n  return (\n    <HeadlessDisclosure\n      defaultOpen={props.defaultOpen}\n      as=\"div\"\n      className={classNames(props.className)}\n    >\n      {({ open }) => (\n        <>\n          <HeadlessDisclosure.Button\n            className={classNames(\"block\", props.buttonClassName)}\n          >\n            {props.button}\n          </HeadlessDisclosure.Button>\n\n          <HeadlessDisclosure.Panel\n            className={classNames(props.panelClassName, !open && \"hidden\")}\n            static\n          >\n            {props.children}\n          </HeadlessDisclosure.Panel>\n        </>\n      )}\n    </HeadlessDisclosure>\n  );\n};\n\nexport default Disclosure;\n","import React from \"react\";\nimport { Episode as EpisodeType } from \"../types\";\nimport { numberWithCommas } from \"../utils\";\nimport Image from \"./Image\";\n\ninterface EpisodeProps extends EpisodeType {\n  active?: boolean;\n  onClick?: () => void;\n}\n\nconst Episode = (props: EpisodeProps) => {\n  return (\n    <div\n      onClick={props.onClick}\n      className=\"border-gray-400 border-b p-4 rounded-md rounded-b-none flex items-center hover:bg-gray-600 cursor-pointer hover:bg-opacity-50\"\n    >\n      <p className=\"text-gray-300 text-lg font-bold w-6 md:w-12\">\n        {props.name}\n      </p>\n\n      <Image\n        className=\"h-20 max-w-36 w-1/2 object-cover mr-2 md:mr-6\"\n        src={props.thumbnail_medium}\n      />\n\n      <div className=\"flex-1 space-y-2\">\n        <div className=\"space-y-1 text-left\">\n          <p className=\"text-white text-lg font-medium line-clamp-1\">\n            {props.full_name}\n          </p>\n          <p className=\"text-gray-500 text-base font-medium\">\n            Lượt xem: {numberWithCommas(props.views)}\n          </p>\n        </div>\n        {props.active && (\n          <div className=\"rounded-md bg-primary px-2 py-1 w-max\">Đang xem</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Episode;\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport { BsChevronDown } from \"react-icons/bs\";\nimport { Episode as EpisodeType } from \"../types\";\nimport Disclosure from \"./Disclosure\";\nimport Episode from \"./Episode\";\n\ninterface EpisodeChunkButtonProps {\n  title: string;\n}\n\nconst EpisodeChunkButton: React.FC<EpisodeChunkButtonProps> = (props) => {\n  return (\n    <div className=\"w-full flex items-center justify-between py-2 px-4\">\n      <p className=\"text-white text-xl\">{props.title}</p>\n\n      <BsChevronDown className=\"w-6 h-6 text-white\" />\n    </div>\n  );\n};\n\ninterface EpisodeChunkProps {\n  episodes: EpisodeType[];\n  title: string;\n  className?: string;\n  buttonClassName?: string;\n  activeName?: number;\n  episodeOnClick?: (episode: EpisodeType, index: number) => void;\n  open?: boolean;\n}\n\nconst EpisodeChunk: React.FC<EpisodeChunkProps> = (props) => {\n  return (\n    <Disclosure\n      className={classNames(props.className)}\n      buttonClassName={classNames(\"w-full rounded-md\", props.buttonClassName)}\n      button={<EpisodeChunkButton title={props.title} />}\n      defaultOpen={props.open}\n    >\n      {props.episodes.map((episode, index) => (\n        <Episode\n          {...episode}\n          key={episode.slug}\n          active={props.activeName === episode.name}\n          onClick={() => props?.episodeOnClick?.(episode, episode.name - 1)}\n        />\n      ))}\n    </Disclosure>\n  );\n};\n\nexport default EpisodeChunk;\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\nimport React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n  ContextType,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\n\nenum DisclosureStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  disclosureState: DisclosureStates\n\n  linkedPanel: boolean\n\n  buttonId: string\n  panelId: string\n}\n\nenum ActionTypes {\n  ToggleDisclosure,\n  CloseDisclosure,\n\n  SetButtonId,\n  SetPanelId,\n\n  LinkPanel,\n  UnlinkPanel,\n}\n\ntype Actions =\n  | { type: ActionTypes.ToggleDisclosure }\n  | { type: ActionTypes.CloseDisclosure }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n  | { type: ActionTypes.LinkPanel }\n  | { type: ActionTypes.UnlinkPanel }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.ToggleDisclosure]: state => ({\n    ...state,\n    disclosureState: match(state.disclosureState, {\n      [DisclosureStates.Open]: DisclosureStates.Closed,\n      [DisclosureStates.Closed]: DisclosureStates.Open,\n    }),\n  }),\n  [ActionTypes.CloseDisclosure]: state => {\n    if (state.disclosureState === DisclosureStates.Closed) return state\n    return { ...state, disclosureState: DisclosureStates.Closed }\n  },\n  [ActionTypes.LinkPanel](state) {\n    if (state.linkedPanel === true) return state\n    return { ...state, linkedPanel: true }\n  },\n  [ActionTypes.UnlinkPanel](state) {\n    if (state.linkedPanel === false) return state\n    return { ...state, linkedPanel: false }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet DisclosureContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nDisclosureContext.displayName = 'DisclosureContext'\n\nfunction useDisclosureContext(component: string) {\n  let context = useContext(DisclosureContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosureAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nDisclosureAPIContext.displayName = 'DisclosureAPIContext'\n\nfunction useDisclosureAPIContext(component: string) {\n  let context = useContext(DisclosureAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosurePanelContext = createContext<string | null>(null)\nDisclosurePanelContext.displayName = 'DisclosurePanelContext'\n\nfunction useDisclosurePanelContext() {\n  return useContext(DisclosurePanelContext)\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DISCLOSURE_TAG = Fragment\ninterface DisclosureRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Disclosure<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(\n  props: Props<TTag, DisclosureRenderPropArg> & {\n    defaultOpen?: boolean\n  }\n) {\n  let { defaultOpen = false, ...passthroughProps } = props\n  let buttonId = `headlessui-disclosure-button-${useId()}`\n  let panelId = `headlessui-disclosure-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId,\n    panelId,\n  } as StateDefinition)\n  let [{ disclosureState }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.CloseDisclosure })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return document.getElementById(buttonId)\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return document.getElementById(buttonId)\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, buttonId]\n  )\n\n  let api = useMemo<ContextType<typeof DisclosureAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<DisclosureRenderPropArg>(\n    () => ({ open: disclosureState === DisclosureStates.Open, close }),\n    [disclosureState, close]\n  )\n\n  return (\n    <DisclosureContext.Provider value={reducerBag}>\n      <DisclosureAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(disclosureState, {\n            [DisclosureStates.Open]: State.Open,\n            [DisclosureStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props: passthroughProps,\n            slot,\n            defaultTag: DEFAULT_DISCLOSURE_TAG,\n            name: 'Disclosure',\n          })}\n        </OpenClosedProvider>\n      </DisclosureAPIContext.Provider>\n    </DisclosureContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(ref)\n\n  let panelContext = useDisclosurePanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.disclosureState === DisclosureStates.Closed) return\n\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            document.getElementById(state.buttonId)?.focus()\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            break\n        }\n      }\n    },\n    [dispatch, isWithinPanel, state.disclosureState]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n        document.getElementById(state.buttonId)?.focus()\n      } else {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n      }\n    },\n    [dispatch, props.disabled, state.buttonId, isWithinPanel]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? { type: 'button', onKeyDown: handleKeyDown, onClick: handleClick }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type: 'button',\n        'aria-expanded': props.disabled\n          ? undefined\n          : state.disclosureState === DisclosureStates.Open,\n        'aria-controls': state.linkedPanel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Panel.name].join('.'))\n  let { close } = useDisclosureAPIContext([Disclosure.name, Panel.name].join('.'))\n\n  let panelRef = useSyncRefs(ref, () => {\n    if (state.linkedPanel) return\n    dispatch({ type: ActionTypes.LinkPanel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.disclosureState === DisclosureStates.Open\n  })()\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.UnlinkPanel }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.disclosureState === DisclosureStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.UnlinkPanel })\n    }\n  }, [state.disclosureState, props.unmount, dispatch])\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n  }\n  let passthroughProps = props\n\n  return (\n    <DisclosurePanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Disclosure.Panel',\n      })}\n    </DisclosurePanelContext.Provider>\n  )\n})\n\n// ---\n\nDisclosure.Button = Button\nDisclosure.Panel = Panel\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport { BsPlayFill } from \"react-icons/bs\";\nimport { useNavigate, useParams } from \"react-router\";\nimport Button from \"../../components/Button\";\nimport EpisodeChunk from \"../../components/EpisodeChunk\";\nimport Image from \"../../components/Image\";\nimport Skeleton from \"../../components/Skeleton\";\nimport { Anime, Episode as EpisodeType } from \"../../types\";\nimport { chunk, numberWithCommas } from \"../../utils\";\nimport Storage from \"../../utils/Storage\";\nimport useFetchInfo from \"./useFetchInfo\";\n\nconst InfoScreen = () => {\n  const { slug } = useParams();\n  const navigate = useNavigate();\n\n  if (!slug) {\n    navigate(\"/\");\n  }\n\n  const storedInfo = Storage.findOne<Anime>(\"recent\", { slug });\n\n  const handleEpisodeClick = (_e: EpisodeType, index: number) => {\n    navigate(`/watch/${slug}?episode_index=${index}`);\n  };\n\n  const { data: info, isLoading } = useFetchInfo(slug);\n\n  const handleClick = (index = 0) => {\n    return () => navigate(`/watch/${slug}?episode_index=${index}`);\n  };\n\n  return (\n    <div className=\"py-16\">\n      <div className=\"w-full\">\n        <div className=\"w-full h-56 overflow-hidden\">\n          {isLoading ? (\n            <Skeleton className=\"w-full h-full\">\n              <div className=\"w-full h-full bg-gray-600\"></div>\n            </Skeleton>\n          ) : (\n            <Image\n              src={info?.thumbnail!}\n              className=\"w-full object-cover filter blur-lg opacity-30\"\n            />\n          )}\n        </div>\n        <div className=\"space-y-4 md:space-x-4 w-full px-2 md:px-12 lg:px-24 -mt-28 md:-mt-14 flex items-center justify-center flex-col md:items-start md:justify-start md:flex-row\">\n          <div className=\"w-full md:w-44 lg:w-52 space-y-4 md:space-y-0\">\n            {isLoading ? (\n              <Skeleton>\n                <div className=\"border-4 border-background bg-gray-600 mx-auto w-44 lg:w-52 h-60 lg:h-80 rounded-md md:rounded-b-none\"></div>\n              </Skeleton>\n            ) : (\n              <Image\n                src={info?.thumbnail!}\n                alt={info?.name}\n                className={classNames(\n                  \"mx-auto filter blur-none w-44 lg:w-52 h-60 lg:h-80 object-cover rounded-md md:rounded-b-none\"\n                )}\n              />\n            )}\n\n            {!isLoading && (\n              <div\n                className={classNames(\n                  \"text-white md:bg-background-darker p-3 w-full space-y-2 rounded-b-md min-h-11\"\n                )}\n              >\n                <h1 className=\"text-base line-clamp-2\">{info?.name}</h1>\n\n                <div>\n                  <h1 className=\"text-sm line-clamp-1\">\n                    Nhóm sub: {info?.subTeams.join(\", \")}\n                  </h1>\n                  <h1 className=\"text-sm line-clamp-1\">\n                    Lượt xem: {numberWithCommas(info?.views)}\n                  </h1>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"w-full px-2 flex flex-col flex-1\">\n            <div className=\"flex-col md:flex-row space-x-2 space-y-2 md:space-y-0 -mt-2 self-center md:self-start flex items-center font-bold text-lg text-white filter blur-none\">\n              <Button\n                className=\"bg-background-darker hover:bg-opacity-80\"\n                onClick={handleClick()}\n                startIcon={BsPlayFill}\n                iconSize={20}\n              >\n                Xem ngay\n              </Button>\n              {!isLoading && storedInfo && (\n                <Button\n                  className=\"bg-background-darker hover:bg-opacity-80\"\n                  onClick={handleClick(storedInfo.episodeIndex)}\n                  startIcon={BsPlayFill}\n                  iconSize={20}\n                >\n                  Xem {info?.episodes[storedInfo.episodeIndex!].full_name}\n                </Button>\n              )}\n            </div>\n\n            <div className=\"mt-6 space-y-2\">\n              <div className=\"space-y-1\">\n                {isLoading ? (\n                  <Skeleton>\n                    <div className=\"h-8 bg-gray-600\"></div>\n                  </Skeleton>\n                ) : (\n                  <h1 className=\"text-white text-2xl\">{info?.name}</h1>\n                )}\n\n                {isLoading ? (\n                  <Skeleton>\n                    <div className=\"h-6 bg-gray-600\"></div>\n                  </Skeleton>\n                ) : (\n                  <h1 className=\"text-gray-400 text-base\">\n                    Thể loại: {info?.genres.map(({ name }) => name).join(\", \")}\n                  </h1>\n                )}\n              </div>\n\n              {isLoading ? (\n                <Skeleton>\n                  <div className=\"h-6 bg-gray-600\"></div>\n                </Skeleton>\n              ) : (\n                <h1 className=\"text-gray-300 text-base\">{info?.description}</h1>\n              )}\n            </div>\n          </div>\n        </div>\n        {!isLoading && (\n          <div className=\"space-y-2 w-full px-4 md:px-32 py-16\">\n            {chunk<EpisodeType>(info?.episodes!, 18).map((chunk, i) => {\n              const firstEpisode = chunk[0];\n              const lastEpisode = chunk[chunk.length - 1];\n\n              return (\n                <EpisodeChunk\n                  buttonClassName=\"bg-background-darker\"\n                  title={`Tập ${firstEpisode.name} - Tập ${lastEpisode.name}`}\n                  episodes={chunk}\n                  key={i}\n                  episodeOnClick={handleEpisodeClick}\n                />\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default InfoScreen;\n"],"sourceRoot":""}